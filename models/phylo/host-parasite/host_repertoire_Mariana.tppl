
type Tree =
    | Leaf(age: Real, label: String)
    | Node(age: Real, left: Tree, right: Tree, label: String)

// Event type used to store information about one host-repertoire change
// We keep the from_state here just in case we want to use it for debugging
type Event(age: Real, host: Int, from_state: Int, to_state: Int)

// History point type used to store repertoire snapshots at the repertoire
// start ages repertoire start age = time of the event that led to that
// combination
type HistoryPoint(age: Real, repertoire: Int[])

// Tree decorated with ancestral host repertoires and branch repertoire histories
type HistoryTree =
  | HistoryLeaf(age: Real, label: String, repertoire: Int[], history: HistoryPoint[])
  | HistoryNode(age: Real, label: String, repertoire: Int[], history: HistoryPoint[],
                left: HistoryTree, right: HistoryTree)

// // interaction matrix
// let interactions: Tensor[Char] = tensorOfSeqExn tensorCreate [6,5] [
//   -- Row labels: T1, T2, T3, T4, T5, T6
//   -- Column labels: H1, H2, H3, H4, H5
//   '2','2','0','0','0',
//   '2','2','0','0','0',
//   '0','0','2','2','0',
//   '0','0','2','2','0',
//   '0','0','0','0','2',
//   '0','0','0','0','2'
// ] in

// // host distance 
// let host_distances: Tensor[Float] = matrixCreate [5,5] [
//   -- Row and column labels: H1, H2, H3, H4, H5
//   0.,0.8630075756,2.6699063134,2.6699063134,2.6699063134,
//   0.8630075756,0.,2.6699063134,2.6699063134,2.6699063134,
//   2.6699063134,2.6699063134,0.,1.2256551506,1.9598979474,
//   2.6699063134,2.6699063134,1.2256551506,0.,1.9598979474,
//   2.6699063134,2.6699063134,1.9598979474,1.9598979474,0.
// ] in


model function (parasite_tree: Tree, ntips: Int, nhosts: Int, interactions: Int[],
  host_distances: Real[], tune: Real): HistoryTree {

}